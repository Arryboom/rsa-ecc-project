/*
 * RSA.ECC Assignment 1, FIT5037, Sem 2, 2011
 * By Mark Culhane, 22471634
 */

/*
 * HomePanel.java
 *
 * Created on 11/08/2011, 11:59:08 PM
 */
package GUI;

import RSA.RSAController;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Mark Culhane
 */
public class RSAPanel extends javax.swing.JPanel {
    private RSAController rsaSess; //only one RSA controller per GUI!

    /** Creates new form HomePanel */
    public RSAPanel() {
        initComponents();
        
    }
    
    /**
     * 
     * @param file String of file path
     * @return fileContents String
     * @throws IOException 
     */
    private String readFile( String file ) throws IOException {
        BufferedReader reader = new BufferedReader( new FileReader (file));
        String line  = null;
        StringBuilder stringBuilder = new StringBuilder();
        String ls = System.getProperty("line.separator");
        while( ( line = reader.readLine() ) != null ) {
            stringBuilder.append( line );
            stringBuilder.append( ls );
    }
    System.out.println(stringBuilder.toString());    
    return stringBuilder.toString();
 }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keySizeCombo = new javax.swing.JComboBox();
        keySizeLabel = new java.awt.Label();
        genKeysButton = new javax.swing.JButton();
        operationCombo = new javax.swing.JComboBox();
        keySizeLabel1 = new java.awt.Label();
        rsaAction = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        publicKeyText = new javax.swing.JTextArea();
        publicKeyLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        privateKeyText = new javax.swing.JTextArea();
        privateKeyLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        keyModulusText = new javax.swing.JTextArea();
        keyModulusLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        rsaInputText = new javax.swing.JTextArea();
        rsaInputLabel = new javax.swing.JLabel();
        rsaRetrievalLabel = new javax.swing.JLabel();
        enterKey = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        rsaOutputText = new javax.swing.JTextArea();
        genHashButton = new javax.swing.JButton();
        fileChooserFrame = new javax.swing.JInternalFrame();
        fileChooser = new javax.swing.JFileChooser();

        keySizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "256", "512", "1024", "2048", "4096" }));
        keySizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keySizeComboActionPerformed(evt);
            }
        });

        keySizeLabel.setText("Select Key Size:");

        genKeysButton.setText("Generate Keys!");
        genKeysButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                genKeysButtonMouseReleased(evt);
            }
        });
        genKeysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genKeysButtonActionPerformed(evt);
            }
        });

        operationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Encrypt", "Decrypt", "Sign", "Verify" }));
        operationCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                operationComboMouseClicked(evt);
            }
        });
        operationCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationComboActionPerformed(evt);
            }
        });

        keySizeLabel1.setText("Select Operation:");

        rsaAction.setText("-- RUN RSA ALGORITHM --");
        rsaAction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rsaActionMouseReleased(evt);
            }
        });

        publicKeyText.setColumns(20);
        publicKeyText.setEditable(false);
        publicKeyText.setRows(1);
        publicKeyText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                publicKeyTextMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(publicKeyText);

        publicKeyLabel.setText("Public Key (e)");

        privateKeyText.setColumns(25);
        privateKeyText.setEditable(false);
        privateKeyText.setLineWrap(true);
        privateKeyText.setRows(10);
        privateKeyText.setWrapStyleWord(true);
        privateKeyText.setMaximumSize(new java.awt.Dimension(275, 280));
        privateKeyText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                privateKeyTextMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(privateKeyText);

        privateKeyLabel.setText("Private Key (d)");

        keyModulusText.setColumns(25);
        keyModulusText.setEditable(false);
        keyModulusText.setLineWrap(true);
        keyModulusText.setRows(10);
        keyModulusText.setWrapStyleWord(true);
        keyModulusText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keyModulusTextMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(keyModulusText);

        keyModulusLabel.setText("Key Modulus (n)");

        rsaInputText.setColumns(25);
        rsaInputText.setLineWrap(true);
        rsaInputText.setRows(10);
        rsaInputText.setWrapStyleWord(true);
        rsaInputText.setMaximumSize(new java.awt.Dimension(275, 280));
        rsaInputText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rsaInputTextMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(rsaInputText);

        rsaInputLabel.setText("RSA Input");

        rsaRetrievalLabel.setText("RSA Output");

        enterKey.setText("-- Enter a key--");
        enterKey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                enterKeyMouseReleased(evt);
            }
        });

        rsaOutputText.setColumns(25);
        rsaOutputText.setEditable(false);
        rsaOutputText.setLineWrap(true);
        rsaOutputText.setRows(10);
        rsaOutputText.setWrapStyleWord(true);
        rsaOutputText.setMaximumSize(new java.awt.Dimension(275, 280));
        rsaOutputText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rsaOutputTextMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(rsaOutputText);

        genHashButton.setText("Generate SHA1 Digest");
        genHashButton.setEnabled(false);
        genHashButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                genHashButtonMouseReleased(evt);
            }
        });
        genHashButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genHashButtonActionPerformed(evt);
            }
        });

        fileChooser.setDialogTitle("Select a File to sign");

        javax.swing.GroupLayout fileChooserFrameLayout = new javax.swing.GroupLayout(fileChooserFrame.getContentPane());
        fileChooserFrame.getContentPane().setLayout(fileChooserFrameLayout);
        fileChooserFrameLayout.setHorizontalGroup(
            fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserFrameLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        fileChooserFrameLayout.setVerticalGroup(
            fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
            .addGroup(fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserFrameLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(publicKeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(keySizeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keySizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(genKeysButton, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(privateKeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                        .addGap(234, 234, 234))
                    .addComponent(enterKey, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                    .addComponent(keyModulusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(keySizeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(operationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addComponent(genHashButton, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(rsaInputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                        .addGap(234, 234, 234))
                    .addComponent(rsaAction, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                    .addComponent(rsaRetrievalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 628, Short.MAX_VALUE)
                    .addComponent(fileChooserFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 628, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(operationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(genHashButton))
                    .addComponent(keySizeLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(keySizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keySizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genKeysButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(publicKeyLabel)
                    .addComponent(rsaInputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(privateKeyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                        .addGap(11, 11, 11)
                        .addComponent(rsaAction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rsaRetrievalLabel)
                            .addComponent(keyModulusLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enterKey, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 295, Short.MAX_VALUE)
                    .addComponent(fileChooserFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 296, Short.MAX_VALUE)))
        );

        keySizeLabel.getAccessibleContext().setAccessibleName("selectKeySize");
        keySizeLabel1.getAccessibleContext().setAccessibleName("RSAOperation");
    }// </editor-fold>//GEN-END:initComponents

private void keySizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keySizeComboActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_keySizeComboActionPerformed

private void genKeysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genKeysButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_genKeysButtonActionPerformed

private void operationComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationComboActionPerformed
    if (operationCombo.getSelectedIndex() == 2) {
        genHashButton.setEnabled(true);
    } else {
        genHashButton.setEnabled(false);
    }
}//GEN-LAST:event_operationComboActionPerformed

private void genKeysButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genKeysButtonMouseReleased
// TODO add your handling code here:
    rsaSess = new RSAController(Integer.parseInt(keySizeCombo.getSelectedItem().toString()));
    publicKeyText.setText(rsaSess.getPublicKey().toString());
    privateKeyText.setText(rsaSess.getPrivateKey().toString());
    keyModulusText.setText(rsaSess.getModulus().toString());
}//GEN-LAST:event_genKeysButtonMouseReleased

private void rsaActionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rsaActionMouseReleased
    // Reaffirms RSA keys in object vars matches display
    publicKeyText.setText(rsaSess.getPublicKey().toString());
    privateKeyText.setText(rsaSess.getPrivateKey().toString());
    keyModulusText.setText(rsaSess.getModulus().toString());
    //checks for null
    if (rsaInputText.getText().trim().length() == 0) {
        JOptionPane.showMessageDialog(null, "Can't encrypt nothingess...", "Null Input!", JOptionPane.ERROR_MESSAGE); 
    }
    //Checking operation selection and running relevent algorithm
    else if (rsaInputText.getText().trim().length() > 50000) {
        JOptionPane.showMessageDialog(null, "Current Input limit: 50,000 characters ", "Too Large", JOptionPane.ERROR_MESSAGE);
    } else if (operationCombo.getSelectedIndex() == 0) {
        rsaOutputText.setText(rsaSess.rsaOperation(rsaInputText.getText(), 'e'));
        JOptionPane.showMessageDialog(null, "Encrypt Processing done!", "Notice", JOptionPane.ERROR_MESSAGE);
    } else if (operationCombo.getSelectedIndex() == 1) {
        rsaOutputText.setText(rsaSess.rsaOperation(rsaInputText.getText(),'d'));
        JOptionPane.showMessageDialog(null, "Decrypt Processing done!", "Notice", JOptionPane.ERROR_MESSAGE);
    } else if (operationCombo.getSelectedIndex() == 2) {
        rsaOutputText.setText(rsaSess.rsaOperation(rsaInputText.getText(),'s'));
        JOptionPane.showMessageDialog(null, "Sign Processing done!", "Notice", JOptionPane.ERROR_MESSAGE);
    } else if (operationCombo.getSelectedIndex() == 3) {
        rsaOutputText.setText(rsaSess.rsaOperation(rsaInputText.getText(),'v'));
        fileChooserFrame.setVisible(true);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    String fileContents = this.readFile(fileChooser.getSelectedFile().toString());
                    if (rsaOutputText.getText().equals(rsaSess.getDigest(fileContents))) {
                        System.out.println("File Contents?: " + fileContents);
                        JOptionPane.showMessageDialog(null, "Your file matches the senders!", "Notice", JOptionPane.ERROR_MESSAGE);
                        rsaOutputText.append("\n File Match!! :D");
                    } else {
                        JOptionPane.showMessageDialog(null, "FILES DO NOT MATCH!!!?!", "Notice", JOptionPane.ERROR_MESSAGE);
                        rsaOutputText.append("\n Files DO NOT MATCH!! D:");
                    }
                fileChooserFrame.setVisible(false);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(RSAPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(RSAPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(RSAPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
        } else {
            System.out.println("File access cancelled by user.");
            fileChooserFrame.setVisible(false);
        }
    } else {
        JOptionPane.showMessageDialog(null, "A GUI Error has Occurred", "GUI Error!", JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_rsaActionMouseReleased

private void genHashButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genHashButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_genHashButtonActionPerformed

private void genHashButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_genHashButtonMouseReleased
    fileChooserFrame.setVisible(true);
    int returnVal = fileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String fileContents = readFile(fileChooser.getSelectedFile().toString());
                rsaInputText.setText(rsaSess.getDigest(fileContents));
                fileChooserFrame.setVisible(false);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(RSAPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(RSAPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RSAPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    } else {
        System.out.println("File access cancelled by user.");
        fileChooserFrame.setVisible(false);
    }


}//GEN-LAST:event_genHashButtonMouseReleased

private void enterKeyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterKeyMouseReleased
    String incomingPubKey = JOptionPane.showInputDialog(null, "Enter Public Key: ","", 1);
    String incomingKeyMod = JOptionPane.showInputDialog(null, "Enter Key Modulus: ","", 1);
    String incomingPrivKey = JOptionPane.showInputDialog(null, "Enter Private Key (If unknown hit Cancel: ","", 1);
    //Cancel Handeling
    if (incomingPubKey == null)
            incomingPubKey = "0";
    if (incomingKeyMod == null)
            incomingKeyMod = "0";
    if (incomingPrivKey == null)
            incomingPrivKey = "0";
    rsaSess = new RSAController(incomingPrivKey, incomingPubKey, incomingKeyMod);
    //Update GUI display values
    publicKeyText.setText(rsaSess.getPublicKey().toString());
    privateKeyText.setText(rsaSess.getPrivateKey().toString());
    keyModulusText.setText(rsaSess.getModulus().toString());
    
}//GEN-LAST:event_enterKeyMouseReleased

private void operationComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_operationComboMouseClicked

}//GEN-LAST:event_operationComboMouseClicked

private void rsaOutputTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rsaOutputTextMouseClicked
    rsaOutputText.selectAll();
}//GEN-LAST:event_rsaOutputTextMouseClicked

private void publicKeyTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_publicKeyTextMouseClicked
    publicKeyText.selectAll();
}//GEN-LAST:event_publicKeyTextMouseClicked

private void privateKeyTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privateKeyTextMouseClicked
    privateKeyText.selectAll();
}//GEN-LAST:event_privateKeyTextMouseClicked

private void keyModulusTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyModulusTextMouseClicked
    keyModulusText.selectAll();
}//GEN-LAST:event_keyModulusTextMouseClicked

private void rsaInputTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rsaInputTextMouseClicked
    rsaInputText.selectAll();
}//GEN-LAST:event_rsaInputTextMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enterKey;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JInternalFrame fileChooserFrame;
    private javax.swing.JButton genHashButton;
    private javax.swing.JButton genKeysButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel keyModulusLabel;
    private javax.swing.JTextArea keyModulusText;
    private javax.swing.JComboBox keySizeCombo;
    private java.awt.Label keySizeLabel;
    private java.awt.Label keySizeLabel1;
    private javax.swing.JComboBox operationCombo;
    private javax.swing.JLabel privateKeyLabel;
    private javax.swing.JTextArea privateKeyText;
    private javax.swing.JLabel publicKeyLabel;
    private javax.swing.JTextArea publicKeyText;
    private javax.swing.JButton rsaAction;
    private javax.swing.JLabel rsaInputLabel;
    private javax.swing.JTextArea rsaInputText;
    private javax.swing.JTextArea rsaOutputText;
    private javax.swing.JLabel rsaRetrievalLabel;
    // End of variables declaration//GEN-END:variables
}
